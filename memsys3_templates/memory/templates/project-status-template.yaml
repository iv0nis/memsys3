# Project Status Template
# Template agnòstic per documentar l'estat de qualsevol projecte
# Copia aquest fitxer i omple els camps marcats amb [OMPLIR]

metadata:
  ultima_actualitzacio: "[DATA]"  # Exemple: 2025-10-23
  actualitzat_per: "[NOM]"  # Qui ha fet l'última actualització
  fase: "[FASE]"  # Exemples: Planificació, MVP, Beta, Producció, Manteniment

visio_general:
  que_es: "[DESCRIPCIÓ 1 LÍNIA]"  # Què fa el projecte en una frase
  objectiu: "[OBJECTIU PRINCIPAL]"  # Què vol aconseguir
  client: "[CLIENT/STAKEHOLDER]"  # Opcional, si aplica

estat_actual:
  fase: "[FASE ACTUAL]"  # On està el projecte ara
  ultima_feature: "[ÚLTIMA FEATURE IMPLEMENTADA]"  # Què s'ha fet recentment
  seguent_milestone: "[PRÒXIM OBJECTIU]"  # Cap on anem

# Defineix aquí cada feature/mòdul del projecte
# Pots afegir tantes features com necessitis seguint aquest esquema:
features:
  feature_exemple_1:  # ID únic de la feature (kebab-case)
    nom: "[NOM FEATURE]"  # Nom visual de la feature
    url: "[URL]"  # URL de producció o staging, si aplica
    estat: "[operatiu|desenvolupament|pendent|deprecated]"
    descripcio: "[DESCRIPCIÓ BREU]"  # Què fa aquesta feature
    funcionalitats:  # Llista de capacitats principals
      - "[FUNCIONALITAT 1]"
      - "[FUNCIONALITAT 2]"
    notes: "[NOTES ADDICIONALS]"  # Opcional

  feature_exemple_2:
    nom: "[NOM FEATURE]"
    url: "[URL]"
    estat: "[ESTAT]"
    descripcio: "[DESCRIPCIÓ]"
    funcionalitats:
      - "[FUNCIONALITAT 1]"

  # Afegeix més features aquí seguint el mateix patró

stack_tecnologic:
  frontend:
    framework: "[FRAMEWORK + VERSIÓ]"  # Exemples: React 18, Vue 3, Astro 5, Next.js 14
    tipus: "[TIPUS]"  # Exemples: SPA, SSG, SSR, MPA
    styling: "[SISTEMA CSS]"  # Exemples: Tailwind, Styled Components, CSS Modules
    patrons: "[PATRONS PRINCIPALS]"  # Opcional: patrons d'arquitectura utilitzats

  backend:  # Opcional si no hi ha backend
    runtime: "[RUNTIME]"  # Exemples: Node.js, Python, Go, .NET
    framework: "[FRAMEWORK]"  # Exemples: Express, FastAPI, Gin, ASP.NET
    database: "[DATABASE]"  # Opcional: PostgreSQL, MongoDB, etc.
    auth: "[SISTEMA AUTH]"  # Opcional: JWT, OAuth, etc.

  llibreries_clau:  # Opcional: llibreries importants a destacar
    - nom: "[NOM LLIBRERIA]"
      us: "[PER QUÈ S'USA]"

  deploy:
    platform: "[PLATFORM]"  # Exemples: Vercel, Netlify, AWS, Railway
    ci_cd: "[PIPELINE]"  # Com es desplega
    env_vars:  # Variables d'entorn crítiques (sense valors!)
      - "[VAR_NAME_1]"
      - "[VAR_NAME_2]"

# URLs principals del projecte
urls:
  produccio: "[URL_PRODUCCIÓ]"  # URL principal
  staging: "[URL_STAGING]"  # Opcional
  # Afegeix més URLs segons necessitat

# Tasques pendents ordenades per prioritat
pendents_prioritaris:
  - prioritat: 1
    tasca: "[TASCA MÉS IMPORTANT]"
    detall: "[DETALLS O CONTEXT]"  # Opcional

  - prioritat: 2
    tasca: "[SEGONA TASCA]"
    detall: "[DETALLS]"

  # Afegeix més tasques segons necessitat
  # Mantén sempre les top 5-7 més importants

# Decisions tècniques importants que cal recordar
# Documenta el "per què" de decisions no òbvies
decisions_clau:
  decisio_exemple_1:  # ID de la decisió
    decisio: "[QUÈ ES VA DECIDIR]"  # La decisió presa
    motiu: "[PER QUÈ]"  # Raonament darrere la decisió
    alternatives_considerades: "[ALTERNATIVES]"  # Opcional
    impacte: "[IMPACTE EN EL PROJECTE]"  # Opcional

  decisio_exemple_2:
    decisio: "[DECISIÓ]"
    motiu: "[MOTIU]"

  # Afegeix més decisions importants aquí

# NOTA: gotchas i warnings NO van aquí
# Els gotchas es documenten a memory/full/sessions.yaml (camp 'gotchas:')
# Context Agent els extraurà de totes les sessions i seleccionarà els top 5 més crítics
# Veure memory/templates/sessions-template.yaml per detalls

# Convencions de codi del projecte
convencions_codi:
  idioma:
    interficie: "[IDIOMA UI]"  # Català, Espanyol, Anglès, etc.
    variables: "[IDIOMA VARIABLES]"  # Mateix o diferent
    comentaris: "[IDIOMA COMENTARIS]"

  naming:
    "[llenguatge_1]": "[CONVENCIÓ]"  # Exemple: javascript: camelCase
    "[llenguatge_2]": "[CONVENCIÓ]"  # Exemple: python: snake_case

  estructura:  # Regles d'organització de codi
    - "[REGLA 1]"
    - "[REGLA 2]"

# Comandos útils per treballar amb el projecte
comandos_utils:
  install: "[COMANDA INSTALL]"  # Exemple: npm install, pip install -r requirements.txt
  dev: "[COMANDA DEV]"  # Exemple: npm run dev, python manage.py runserver
  build: "[COMANDA BUILD]"  # Exemple: npm run build
  deploy: "[COMANDA DEPLOY]"  # Exemple: npx vercel --prod
  test: "[COMANDA TEST]"  # Exemple: npm test, pytest
  lint: "[COMANDA LINT]"  # Exemple: npm run lint
  # Afegeix més comandos segons necessitat

# Històric de sessions/sprints importants
# Afegeix una entrada per cada sessió de treball significativa
historic_sessions:
  - data: "[YYYY-MM-DD]"
    durada: "[DURADA]"  # Opcional: 2h, 1 dia, etc.
    objectiu: "[OBJECTIU SESSIÓ]"  # Què es volia aconseguir
    features_implementades:
      - "[FEATURE 1]"
      - "[FEATURE 2]"
    problemes_resolts:
      - "[PROBLEMA 1]"
      - "[PROBLEMA 2]"
    decisions_preses:
      - "[DECISIÓ 1]"
      - "[DECISIÓ 2]"
    notes: "[NOTES ADDICIONALS]"  # Opcional

  # Afegeix més sessions aquí mantenint les més recents al principi
